#!/bin/sh
#############################################
#                                           #
# tradelog                                  #
# Reseni: IOS-Projekt 1, 27.3.2020          #
# Autor: Vaclav Korvas, VUT FIT (xkorva03)  #
# analyzuje logy z obchodovani na burze     #
#                                           #
#############################################


export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

#funkce pro vypsani napovedy
my_print_h()
{   
    echo "NAME"
    echo "  tradelog - analyzuje logy z obchodovani na burze"
    echo ""
    echo "USAGE"
    echo "  tradelog [FILTR... ] [PRIKAZ] [LOG_FILE ...]"
    echo "  tradelog [-h|--help]"
    echo ""
    echo "PRIKAZ - jen jeden z"
    echo ""
    echo "  list-tick   vypis seznamu vyskytujicich se burzovnich symbolu"
    echo "  profit      vypis celkoveho zisku z uzavrenych pozic"
    echo "  pos         vypis hodnot aktualne drzenych pozic serezen sestupne"
    echo "  last-price  vypis posleni zname ceny pro kazdy ticker"
    echo "  hist-ord    vypis histogramu poctu transakci dle tickeru"
    echo "  graph-pos   vypis grafu hodnot drzenych pozic dle tickeru"
    echo ""
    echo "FILTR - kombinace nasledujicich"
    echo ""
    echo "  -a DATETIME jsou uvazovany pouze zaznamy po tomto datu"
    echo "  -b DATETIME jsou uvazovany pouze zaznamy pred timto datem"
    echo "  -t TICKER   jsou uvazovany zaznamy odpovidajici danemu tickeru"
    echo "  -w WIDTH    u vypisu grafu nastavuje delku nejdelsiho radku na WIDTH"
    echo ""
    echo "Logy lze predavat i v .gz, lze zpracovat i vice logu najednou"
    echo "Je nutne zadat prvni vsechny prepinace, potom, pak (volitelne) prikaz a"
    echo "nakonec seznam vstupnÃ­ch soubor"
    echo ""
}   

error()
{
    echo "Byl zadan vice nez 1 PRIKAZ!" 
    exit 1

}

PRIKAZ=""
AFTER_DATETIME=""
BEFORE_DATETIME="9999-99-99 99:99:99"
PRIKAZ_SET=0
WIDTH_SET=0
WIDTH=""
TICKER=""
MAX=0

#smycka na pruchod vsemi argumenty
while [ "$#" -gt 0 ]; do
    case "$1" in
        -h|--help)
          my_print_h
           exit 0
            ;;
        pos)
            if [ "$PRIKAZ_SET" -eq 0 ]; then
                PRIKAZ="$1"
                PRIKAZ_SET=1
            else
                error
            fi
            shift
            ;;
       list-tick)
            if [ "$PRIKAZ_SET" -eq 0 ]; then
                PRIKAZ="$1"
                PRIKAZ_SET=1
            else
                error
            fi
            shift
            ;;
        profit)
            if [ "$PRIKAZ_SET" -eq 0 ]; then
                PRIKAZ="$1"
                PRIKAZ_SET=1
            else
                error
            fi
            shift
            ;;
        last-price)
            if [ "$PRIKAZ_SET" -eq 0 ]; then
                PRIKAZ="$1"
                PRIKAZ_SET=1
            else
                error
            fi
            shift
            ;;
        hist-ord)
            if [ "$PRIKAZ_SET" -eq 0 ]; then
                PRIKAZ="$1"
                PRIKAZ_SET=1
            else
                error
            fi
            shift
            ;;
        graph-pos)
            if [ "$PRIKAZ_SET" -eq 0 ]; then
                PRIKAZ="$1"
                PRIKAZ_SET=1
            else
                error
            fi
            shift
            ;;
        -w)
            if [ "$WIDTH_SET" -eq 0 ]; then
                shift
                WIDTH="$1"
                if [ "$WIDTH" -lt 0 ]; then
                    echo "Cislo u width ma byt vetsi nez 0"
                    exit 1
                fi
                WIDTH_SET=1
            else
                echo "Bylo zadano vice nez 1 prepinac -w. Chybne spusteni!"
                exit 1
            fi
            shift
            ;;
        -t)
            shift
            TICKER="$1|${TICKER} "
            shift
            ;;
        -a)
            shift
            AFTER_DATETIME="$1"
            shift
            ;;
        -b)
            shift
            BEFORE_DATETIME="$1"
            shift
            ;;
        *)
            ext="${1##*.}"
            if [ "$ext" = "gz" ]; then
                GZ_F="$1 $GZ_F"
            else
                LOG_F="$1 $LOG_F"
            fi
            shift
            ;;
  esac
done

#prace se soubory, ulozeni otevreneho souboru do promenne ro dalsi praci
if [ "$GZ_F" = "" ] && [ ! "$LOG_F" = "" ]; then
    #SOUBOR="cat $LOG_F"
    SOUBOR=$(cat $LOG_F)
elif [ "$GZ_F" = "" ] && [  "$LOG_F" = "" ]; then
    SOUBOR=$(cat -)
elif [ ! "$GZ_F" = "" ] && [ "$LOG_F" = "" ]; then
    SOUBOR=$(gunzip -d -c $GZ_F)
elif [ ! "$GZ_F" = "" ] && [ !  "$LOG_F" = "" ]; then
    SOUBOR=$(gzip -d -c $GZ_F | cat $LOG_F -)
fi

#filtrovani logu na zaklade prepinacu -a, -b a -w

if [ ! "$TICKER" = "" ]; then
    SOUBOR=$(echo "$SOUBOR" | awk -F ';' -v ticker="$TICKER" 'BEGIN{split(ticker,a,"|")}; {for(i in a){if(a[i] == $2)print}} ')
fi

if [ ! "$AFTER_DATETIME" = "" ]; then
    SOUBOR=$(echo "$SOUBOR" | awk -F ';' -v time="$AFTER_DATETIME" '$1 > time { print $0 }')
fi

if [ ! "$BEFORE_DATETIME" = "9999-99-99 99:99:99" ]; then
    SOUBOR=$(echo "$SOUBOR" | awk -F ';' -v time="$BEFORE_DATETIME" '$1 < time { print $0 }')
fi

#jednotlive prikazy pro vypis

if [ "$PRIKAZ" = "list-tick" ]; then
    echo "$SOUBOR" | awk -F ';' '{ print $2 }' | sort -u
    exit 0
fi

if [ "$PRIKAZ" = "profit" ]; then
    echo "$SOUBOR" | awk -F ';' '$3 ~ /sell/ {sum += ($4 * $6)}; $3 ~ /buy/ {sum2 += $4 * $6} END {printf "%.2f\n", (sum-sum2)}'
    exit 0
fi

if [ "$PRIKAZ" = "pos" ]; then
    #serazeni podle tickeru a data
    SOUBOR=$(echo "$SOUBOR" | awk -F ';' '{print }'| sort | sort -s -t ';' -k 2,2)
    #vypocitani aktualne drzenych pozic
    SOUBOR=$(echo "$SOUBOR" | awk -F ';' -v sum="0" -v cena="0" -v ticker="" '{if(ticker==""){ticker=$2;} if(ticker==$2){ cena=$4;if($3=="buy"){sum+=$6}else{sum-=$6} } else{printf "%-10s: %.2f\n",ticker,sum*cena;ticker=$2;sum="0";cena=$4;if($3=="buy"){sum+=$6}else{sum-=$6}} } END{printf "%-10s: %.2f\n",ticker,sum*cena;}') 
    #urceni nejdelsi hodnoty podle, ktere se bude zarovnavat
    MAX=$(echo "$SOUBOR" | awk -F ": " -v max="0" -v ticker="" '{if(ticker==""){ticker=$1; max=length($2)} if(ticker!=$1){if(max<length($2)){max=length($2)}} } END{printf "%d", max}')
    echo "$SOUBOR" | awk -F ":" -v max="$MAX" -v ticker="" '{printf "%-10s: %*.2f\n", $1, max,$2}' | sort -t ':' -k 2 -n -r 
    exit 0
fi

if [ "$PRIKAZ" = "last-price" ]; then
    #serazeni podle tickeru a data
    SOUBOR=$(echo "$SOUBOR" | awk -F ';' '{print }'| sort | sort -s -t ';' -k 2,2)
    #vypocteni poslednich cen tickeru
    SOUBOR=$(echo "$SOUBOR" | awk -F ';' -v cena="0" -v ticker="" '{if(ticker==""){ticker=$2}} {if(ticker==$2){cena=$4;}else{printf "%-10s: %.2f\n",ticker,cena; ticker=$2;cena=$4}} END {printf "%-10s: %.2f\n",ticker,cena;}')
    #urceni nejdelsi hodnoty podle, ktere se bude zarovnavat
    MAX=$(echo "$SOUBOR" | awk -F ": " -v max="0" -v ticker="" '{if(ticker==""){ticker=$1; max=length($2)} if(ticker!=$1){if(max<length($2)){max=length($2)}} } END{printf "%d", max}')
    echo "$SOUBOR" | awk -F ":" -v max="$MAX" -v ticker="" '{printf "%-10s: %*.2f\n", $1, max,$2}'
    exit 0
fi

if [ "$PRIKAZ" = "hist-ord" ]; then
    #serazeni podle tickeru a data
    SOUBOR=$(echo "$SOUBOR" | awk -F ';' '{print }'| sort | sort -s -t ';' -k 2,2)
    #rozdeleni na dve moznosti, podle toho, zda-li je zadan prepinac -w
    if [ "$WIDTH" = "" ];then
        echo "$SOUBOR" | awk -F ';' -v pocet="0" -v ticker="" -v znaky="" -v hastag="#" '{if(ticker==""){ticker=$2}} {if(ticker==$2){pocet += 1;}else{{for(i=0; i < pocet; i++){znaky=hastag znaky}}; printf "%-10s: %-s\n",ticker,znaky; znaky="";ticker=$2;pocet=1}} END{{for(i=0; i < pocet; i++){znaky=hastag znaky}};printf "%-10s: %-s\n",ticker,znaky;}'
        exit 0
    else
        MAX=$(echo "$SOUBOR" | awk -F ';' -v pocet="0" -v ticker="" -v max="0" '{if(ticker==""){ticker=$2}} {if(ticker==$2){pocet += 1;}else{if(pocet > max){max=pocet};ticker=$2;pocet=1}} END{if(pocet > max){max=pocet};print max}') 
        #echo "$SOUBOR" | awk -F ';' '{print }'| sort | sort -s -t ';' -k 2,2 | awk -F ';' -v pocet="0" -v ticker="" -v znaky="" -v hastag="#" -v max="$MAX" -v width="$WIDTH" '{if(ticker==""){ticker=$2}} {if(ticker==$2){pocet += 1;}else{pocet=int((pocet/max)*width);{for(i=0; i < pocet; i++){znaky=hastag znaky}};printf "%-10s: %-s\n",ticker,znaky,pocet; znaky="";ticker=$2;pocet=1}} END{pocet=int((pocet/max)*width);{for(i=0; i < pocet; i++){znaky=hastag znaky}};printf "%-10s: %-s\n",ticker,znaky;}'
        echo "$SOUBOR" | awk -F ';' -v pocet="0" -v ticker="" -v znaky="" -v hastag="#" -v max="$MAX" -v width="$WIDTH" '{if(ticker==""){ticker=$2}} {if(ticker==$2){pocet += 1;}else{pocet=int((pocet/max)*width);{for(i=0; i < pocet; i++){znaky=hastag znaky}};printf "%-10s: %-s\n",ticker,znaky,pocet; znaky="";ticker=$2;pocet=1}} END{pocet=int((pocet/max)*width);{for(i=0; i < pocet; i++){znaky=hastag znaky}};printf "%-10s: %-s\n",ticker,znaky;}'
        exit 0
    fi
fi

if [ "$PRIKAZ" = "graph-pos" ]; then
    SOUBOR=$(echo "$SOUBOR" | awk -F ';' '{print }'| sort | sort -s -t ';' -k 2,2)
    SOUBOR=$(echo "$SOUBOR" | awk -F ';' -v sum="0" -v cena="0" -v ticker="" '{if(ticker==""){ticker=$2;} if(ticker==$2){ cena=$4;if($3=="buy"){sum+=$6}else{sum-=$6} } else{printf "%-10s: %.2f\n",ticker,sum*cena;ticker=$2;sum="0";cena=$4;if($3=="buy"){sum+=$6}else{sum-=$6}} } END{printf "%-10s: %.2f\n",ticker,sum*cena;}')
    if [ "$WIDTH" = "" ];then
        echo "$SOUBOR" | awk -F ": " -v pocet="0" -v znaky="" -v hastag="#" -v vykr="!" '{pocet=int($2/1000); if(pocet<0){ {for(i = pocet; i < 0; i++){znaky=vykr znaky}} }else{ {for(i = 0; i < pocet; i++){znaky=hastag znaky}} }; printf "%-10s: %s\n", $1,znaky; znaky="" ;pocet=1}'
        exit 0
    else
        MAX=$(echo "$SOUBOR" | awk -F ':' -v ticker="" -v max="0" 'function abs(x){return ((x < 0.0) ? -x : x)} {if(max==0){max=abs($2)}else{if(max<abs($2)){max=abs($2)}}} END{if(max<abs($2)){max=abs($2)}; printf "%.2f\n", max}')
        echo "$SOUBOR" | awk -F ':' -v width="$WIDTH" -v max="$MAX" -v pocet="0" -v znaky="" -v hastag="#" -v vykr="!" '{pocet=int(($2/max)*width); if(pocet<0){ {for(i = pocet; i < 0; i++){znaky=vykr znaky}} }else{ {for(i = 0; i < pocet; i++){znaky=hastag znaky} }}; if(pocet==0){printf "%-10s:\n",$1}else{printf "%-10s: %s\n",$1,znaky}; pocet=0;znaky=""}'
        exit 0
    fi
fi
#pokud neni zadan zadny prikaz vypise se samotny soubor
echo "$SOUBOR"
exit 0
